function plot_error(X1, Y1)
%CREATEFIGURE(X1, Y1)
%  X1:  vector of x data
%  Y1:  vector of y data

%  Auto-generated by MATLAB on 20-Jul-2015 01:28:46

% Create figure
figure1 = figure;

% Create axes
axes1 = axes('Parent',figure1);
%% Uncomment the following line to preserve the X-limits of the axes
% xlim(axes1,[0 900]);
%% Uncomment the following line to preserve the Y-limits of the axes
% ylim(axes1,[-5.45418 180]);
box(axes1,'on');
hold(axes1,'on');

% Create plot
plot1 = plot(X1,Y1,'DisplayName','data1');

% Get xdata from plot for data statistics
xdata1 = get(plot1, 'xdata');
% Get ydata from plot for data statistics
ydata1 = get(plot1, 'ydata');
% Make sure data are column vectors
xdata1 = xdata1(:);
ydata1 = ydata1(:);


% Get axes xlim
axXLim1 = get(axes1, 'xlim');

% Find the mean
ymean1 = mean(ydata1);

meanValue1 = [ymean1 ymean1];
% Create plot
statLine1 = plot(axXLim1,meanValue1,'DisplayName','   y mean',...
    'Tag','mean y',...
    'Parent',axes1,...
    'Marker','diamond',...
    'LineWidth',1.5,...
    'LineStyle','--',...
    'Color',[0.24705882370472 0.24705882370472 0.24705882370472]);

% Set new line in proper position
setLineOrder(axes1, statLine1, plot1);

% Find the std
ystd1 = std(ydata1);

% Prepare values to plot std; first find the mean
ymean2 = mean(ydata1);
% Compute bounds as mean +/- std
lowerBound1 = ymean2 - ystd1;
upperBound1 = ymean2 + ystd1;
% Get coordinates for the std bounds line
stdValue1 = [lowerBound1 lowerBound1 NaN upperBound1 upperBound1 NaN];
axXStdLim1 = [axXLim1 NaN axXLim1 NaN];

% Plot the bounds
statLine2 = plot(axXStdLim1,stdValue1,'DisplayName','   y std',...
    'Tag','std y',...
    'Parent',axes1,...
    'LineWidth',1,...
    'LineStyle','-.',...
    'Color',[0.75 0 0.75]);

% Set new line in proper position
setLineOrder(axes1, statLine2, plot1);

% Find the median
ymedian1 = median(ydata1);

medianValue1 = [ymedian1 ymedian1];
% Create plot
statLine3 = plot(axXLim1,medianValue1,'DisplayName','   y median',...
    'Tag','median y',...
    'Parent',axes1,...
    'Marker','pentagram',...
    'LineWidth',1,...
    'LineStyle','--',...
    'Color',[1 0 0]);

% Set new line in proper position
setLineOrder(axes1, statLine3, plot1);

% Find the mode
ymode1 = mode(ydata1);

modeValue1 = [ymode1 ymode1];
% Create plot
statLine4 = plot(axXLim1,modeValue1,'DisplayName','   y mode',...
    'Tag','mode y',...
    'Parent',axes1,...
    'Marker','hexagram');

% Set new line in proper position
setLineOrder(axes1, statLine4, plot1);

% Find the max
ymax1 = max(ydata1);

maxValue1 = [ymax1 ymax1];
% Create plot
statLine5 = plot(axXLim1,maxValue1,'DisplayName','   y max','Tag','max y',...
    'Parent',axes1,...
    'LineStyle','-.',...
    'Color',[0 0 1]);

% Set new line in proper position
setLineOrder(axes1, statLine5, plot1);

% Find the min
ymin1 = min(ydata1);

minValue1 = [ymin1 ymin1];
% Create plot
statLine6 = plot(axXLim1,minValue1,'DisplayName','   y min','Tag','min y',...
    'Parent',axes1,...
    'LineStyle','-.',...
    'Color',[0 0.75 0.75]);

% Set new line in proper position
setLineOrder(axes1, statLine6, plot1);

% Create legend
legend1 = legend(axes1,'show');
set(legend1,'FontSize',9);

%-------------------------------------------------------------------------%
function setLineOrder(axesh1, newLine1, associatedLine1)
%SETLINEORDER(AXESH1,NEWLINE1,ASSOCIATEDLINE1)
%  Set line order
%  AXESH1:  axes
%  NEWLINE1:  new line
%  ASSOCIATEDLINE1:  associated line

% Get the axes children
hChildren = get(axesh1,'Children');
% Remove the new line
hChildren(hChildren==newLine1) = [];
% Get the index to the associatedLine
lineIndex = find(hChildren==associatedLine1);
% Reorder lines so the new line appears with associated data
hNewChildren = [hChildren(1:lineIndex-1);newLine1;hChildren(lineIndex:end)];
% Set the children:
set(axesh1,'Children',hNewChildren);

set(gcf,'units','normalized','outerposition',[0 0 1 1])
